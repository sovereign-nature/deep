// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from '@graphprotocol/graph-ts'

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this)
  }
}

export class Approval__Params {
  _event: Approval

  constructor(event: Approval) {
    this._event = event
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get tokenId(): bigint {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this)
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll

  constructor(event: ApprovalForAll) {
    this._event = event
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean()
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this)
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged

  constructor(event: RoleAdminChanged) {
    this._event = event
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes()
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes()
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this)
  }
}

export class RoleGranted__Params {
  _event: RoleGranted

  constructor(event: RoleGranted) {
    this._event = event
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress()
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this)
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked

  constructor(event: RoleRevoked) {
    this._event = event
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes()
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress()
  }
}

export class StatusSet extends ethereum.Event {
  get params(): StatusSet__Params {
    return new StatusSet__Params(this)
  }
}

export class StatusSet__Params {
  _event: StatusSet

  constructor(event: StatusSet) {
    this._event = event
  }

  get tokenId(): bigint {
    return this._event.parameters[0].value.toBigInt()
  }

  get status(): bigint {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class TokenURISet extends ethereum.Event {
  get params(): TokenURISet__Params {
    return new TokenURISet__Params(this)
  }
}

export class TokenURISet__Params {
  _event: TokenURISet

  constructor(event: TokenURISet) {
    this._event = event
  }

  get tokenId(): bigint {
    return this._event.parameters[0].value.toBigInt()
  }

  get tokenURI(): string {
    return this._event.parameters[1].value.toString()
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this)
  }
}

export class Transfer__Params {
  _event: Transfer

  constructor(event: Transfer) {
    this._event = event
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get tokenId(): bigint {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class SovereignNatureIdentifier extends ethereum.SmartContract {
  static bind(address: Address): SovereignNatureIdentifier {
    return new SovereignNatureIdentifier('SovereignNatureIdentifier', address)
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    const result = super.call(
      'DEFAULT_ADMIN_ROLE',
      'DEFAULT_ADMIN_ROLE():(bytes32)',
      []
    )

    return result[0].toBytes()
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      'DEFAULT_ADMIN_ROLE',
      'DEFAULT_ADMIN_ROLE():(bytes32)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  MINTER_ROLE(): Bytes {
    const result = super.call('MINTER_ROLE', 'MINTER_ROLE():(bytes32)', [])

    return result[0].toBytes()
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall('MINTER_ROLE', 'MINTER_ROLE():(bytes32)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  ORACLE_ROLE(): Bytes {
    const result = super.call('ORACLE_ROLE', 'ORACLE_ROLE():(bytes32)', [])

    return result[0].toBytes()
  }

  try_ORACLE_ROLE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall('ORACLE_ROLE', 'ORACLE_ROLE():(bytes32)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  balanceOf(owner: Address): bigint {
    const result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(owner)
    ])

    return result[0].toBigInt()
  }

  try_balanceOf(owner: Address): ethereum.CallResult<bigint> {
    const result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(owner)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getApproved(tokenId: bigint): Address {
    const result = super.call('getApproved', 'getApproved(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])

    return result[0].toAddress()
  }

  try_getApproved(tokenId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'getApproved',
      'getApproved(uint256):(address)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  getRoleAdmin(role: Bytes): Bytes {
    const result = super.call('getRoleAdmin', 'getRoleAdmin(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(role)
    ])

    return result[0].toBytes()
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      'getRoleAdmin',
      'getRoleAdmin(bytes32):(bytes32)',
      [ethereum.Value.fromFixedBytes(role)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  hasRole(role: Bytes, account: Address): boolean {
    const result = super.call('hasRole', 'hasRole(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ])

    return result[0].toBoolean()
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall('hasRole', 'hasRole(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    const result = super.call(
      'isApprovedForAll',
      'isApprovedForAll(address,address):(bool)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    )

    return result[0].toBoolean()
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'isApprovedForAll',
      'isApprovedForAll(address,address):(bool)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  name(): string {
    const result = super.call('name', 'name():(string)', [])

    return result[0].toString()
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall('name', 'name():(string)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  ownerOf(tokenId: bigint): Address {
    const result = super.call('ownerOf', 'ownerOf(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])

    return result[0].toAddress()
  }

  try_ownerOf(tokenId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall('ownerOf', 'ownerOf(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  statusOf(tokenId: bigint): bigint {
    const result = super.call('statusOf', 'statusOf(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])

    return result[0].toBigInt()
  }

  try_statusOf(tokenId: bigint): ethereum.CallResult<bigint> {
    const result = super.tryCall('statusOf', 'statusOf(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  supportsInterface(interfaceId: Bytes): boolean {
    const result = super.call(
      'supportsInterface',
      'supportsInterface(bytes4):(bool)',
      [ethereum.Value.fromFixedBytes(interfaceId)]
    )

    return result[0].toBoolean()
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'supportsInterface',
      'supportsInterface(bytes4):(bool)',
      [ethereum.Value.fromFixedBytes(interfaceId)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  symbol(): string {
    const result = super.call('symbol', 'symbol():(string)', [])

    return result[0].toString()
  }

  try_symbol(): ethereum.CallResult<string> {
    const result = super.tryCall('symbol', 'symbol():(string)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  tokenURI(tokenId: bigint): string {
    const result = super.call('tokenURI', 'tokenURI(uint256):(string)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])

    return result[0].toString()
  }

  try_tokenURI(tokenId: bigint): ethereum.CallResult<string> {
    const result = super.tryCall('tokenURI', 'tokenURI(uint256):(string)', [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this)
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this)
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get tokenId(): bigint {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this)
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this)
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall

  constructor(call: GrantRoleCall) {
    this._call = call
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes()
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall

  constructor(call: GrantRoleCall) {
    this._call = call
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this)
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this)
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall

  constructor(call: RenounceRoleCall) {
    this._call = call
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes()
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall

  constructor(call: RenounceRoleCall) {
    this._call = call
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this)
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this)
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall

  constructor(call: RevokeRoleCall) {
    this._call = call
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes()
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall

  constructor(call: RevokeRoleCall) {
    this._call = call
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this)
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this)
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall

  constructor(call: SafeMintCall) {
    this._call = call
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString()
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall

  constructor(call: SafeMintCall) {
    this._call = call
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this)
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this)
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall

  constructor(call: SafeTransferFromCall) {
    this._call = call
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get tokenId(): bigint {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall

  constructor(call: SafeTransferFromCall) {
    this._call = call
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this)
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this)
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call

  constructor(call: SafeTransferFrom1Call) {
    this._call = call
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get tokenId(): bigint {
    return this._call.inputValues[2].value.toBigInt()
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes()
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call

  constructor(call: SafeTransferFrom1Call) {
    this._call = call
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this)
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this)
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall

  constructor(call: SetApprovalForAllCall) {
    this._call = call
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean()
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall

  constructor(call: SetApprovalForAllCall) {
    this._call = call
  }
}

export class SetStatusCall extends ethereum.Call {
  get inputs(): SetStatusCall__Inputs {
    return new SetStatusCall__Inputs(this)
  }

  get outputs(): SetStatusCall__Outputs {
    return new SetStatusCall__Outputs(this)
  }
}

export class SetStatusCall__Inputs {
  _call: SetStatusCall

  constructor(call: SetStatusCall) {
    this._call = call
  }

  get tokenId(): bigint {
    return this._call.inputValues[0].value.toBigInt()
  }

  get _status(): bigint {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class SetStatusCall__Outputs {
  _call: SetStatusCall

  constructor(call: SetStatusCall) {
    this._call = call
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this)
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this)
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall

  constructor(call: SetTokenURICall) {
    this._call = call
  }

  get tokenId(): bigint {
    return this._call.inputValues[0].value.toBigInt()
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString()
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall

  constructor(call: SetTokenURICall) {
    this._call = call
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this)
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this)
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get tokenId(): bigint {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from '@graphprotocol/graph-ts'

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super()
    this.set('id', Value.fromString(id))
  }

  save(): void {
    const id = this.get('id')
    assert(id != null, 'Cannot save ExampleEntity entity without an ID')
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      )
      store.set('ExampleEntity', id.toString(), this)
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get('ExampleEntity', id))
  }

  get id(): string {
    const value = this.get('id')
    return value!.toString()
  }

  set id(value: string) {
    this.set('id', Value.fromString(value))
  }

  get count(): bigint {
    const value = this.get('count')
    return value!.toBigInt()
  }

  set count(value: bigint) {
    this.set('count', Value.fromBigInt(value))
  }

  get owner(): Bytes {
    const value = this.get('owner')
    return value!.toBytes()
  }

  set owner(value: Bytes) {
    this.set('owner', Value.fromBytes(value))
  }

  get approved(): Bytes {
    const value = this.get('approved')
    return value!.toBytes()
  }

  set approved(value: Bytes) {
    this.set('approved', Value.fromBytes(value))
  }
}
